Requerimientos Codigo

Dada una secuencia generar una "1 2 3 1 2 3" secuencia comprimida "R2"

Construir una gramática que genere dicha secuencia. Para ello, 
    - recursivamente reemplaza el par de sı́mbolos más frecuente, digamos xy por un nuevo sı́mbolo Z. 
        En ese momento se crea una regla de la forma Z → xy.
    - El proceso termina cuando ningún par de sı́mbolos se repite 2 veces.
    - No se considera la forma de almacenar las reglas
    - Se debe utilizar(e implementar) una lista doblemente enlazada
    - Se puede usar la clase map de la stl
    - Se puede usar la clase pair de la stl

Para la primera Version

La versión directa hará iteraciones sobre la secuencia mientras que en la misma haya algún par con frecuencia
Una vez detectado el par de mayor frecuencia, mayor a 1. Cada iteración realizará varias pasadas sobre la secuencia. En la primera pasada, para contar la frecuencia de los pares se utilizará map.
e realizará una segunda pasada reemplazando dicho par por un sı́mbolo nuevo y se pasará a la siguiente
iteración. Notar que en cada iteración el map se debe vaciar.

Pseudo codigo a partir del parrafo anterior

seq[n] = {1, ..., 27}

do 
    VaciarMapa()
    par_freq_max = frecuenciaMaxima(seq) // O(n) pasada 1 // par_freq_max = (par, freq)
    If par_freq_max.freq > 1
        reemplazarParPorSimboloNuevo(seq) // O(n) pasada 2
while (freq_max >1)

seq[7] = {1,...27}

Ej de Mapeo (pasada 1)
1 2 3 4 1 2 3 

key, value
par, freq
1 2, 2
2 3, 2
3 4, 1
4 1, 1

par_freq_max = (1 2, 2)
generamos regla
1 2 -> 28

aplicamos la regla
seq = [28, 3, 4, 28, 3 ] 

iteracion 2
VaciarMapa()

Mapear de nuevo (pasada 1)

key, value
par, freq
28 3, 2
3 4, 1
4 28, 1

par_freq_max = (28 3, 2)
generamos regla
28 3 -> 29

aplicamos la regla
seq = [29, 4, 29 ] 

iteracion 3

key, value
par, freq
29 4, 1
4 29, 1

muere

Para la segunda iteracion

En la versión avanzada, cada nodo de la lista doblemente enlazada contendrá dos punteros adicionales, uno a la ocurrencia previa del mismo par y otro a la 
ocurrencia siguiente a dicho par. El map, además de la frecuencia del par, almacenará un puntero a la primera ocurrencia del par y un puntero a la última ocurrencia
del par. Por último, se implementará un MAX-heap cuya clave será la frecuencia y, por cada nodo, el valor será el par correspondiente (notar que estos nodos
son conceptuales, ya que MAX-heap se puede implementar sobre un arreglo o vector). El heap implementado debe permitir una operación adicional a las habituales la
cual, dado un nodo, permitirá modificar su clave (notar que esto puede subir o bajar al nodo en el heap).


Lista Doblemente Enlazada con punteros adicionales
    - prev_pair
    - next_pair

Map debe incluir
    - Frecuencia del par
    - puntero a la primera ocurrencia del par 
    - puntero a la ultima ocurrencia del par

MAX heap que debe incluir todos los nodos
    - clave: frequencia del par 
    - valor: par correspondiente 
    - implementar funcion { fun(nodo) -> modificar(nodo)}


También es posible que un clave llegue a valer 0, pero no es necesario eliminar el nodo correspondiente. 

El algoritmo funcionará del siguiente modo: 
    en una primera pasada se inicializará el map, el heap y los punteros de la lista doblemente enlazada. 
    Después, iterativamente se solicitará al heap el par de mayor frecuencia. 
        Si la frecuencia es menor que 2, se termina el algoritmo. 
        Mientras que la frecuencia obtenida sea 2 o más, 
            se creará un nuevo sı́mbolo (incremental sobre el anterior) que reemplazará a dicho par en la secuencia. 
            Por cada substitución en la secuencia se puede tener que: 
                crear un nuevo par (con el nuevo sı́mbolo y quien lo precede/sucede), modificar la frecuencia de un par y/o eliminar un par. 
                se deben mantener los punteros en la lista doblemente enlazada. 
                Estos detalles de implementación pueden complicar el proyecto, 
                por lo que se recomienda realizar un ejemplo completo en papel en el que se analicen todos los casos.