Requerimientos Codigo

Dada una secuencia generar una "1 2 3 1 2 3" secuencia comprimida "R2"

Construir una gramática que genere dicha secuencia. Para ello, 
    - recursivamente reemplaza el par de sı́mbolos más frecuente, digamos xy por un nuevo sı́mbolo Z. 
        En ese momento se crea una regla de la forma Z → xy.
    - El proceso termina cuando ningún par de sı́mbolos se repite 2 veces.
    - No se considera la forma de almacenar las reglas
    - Se debe utilizar(e implementar) una lista doblemente enlazada
    - Se puede usar la clase map de la stl
    - Se puede usar la clase pair de la stl

Para la primera Version

La versión directa hará iteraciones sobre la secuencia mientras que en la misma haya algún par con frecuencia
Una vez detectado el par de mayor frecuencia, mayor a 1. Cada iteración realizará varias pasadas sobre la secuencia. En la primera pasada, para contar la frecuencia de los pares se utilizará map.
e realizará una segunda pasada reemplazando dicho par por un sı́mbolo nuevo y se pasará a la siguiente
iteración. Notar que en cada iteración el map se debe vaciar.

Pseudo codigo a partir del parrafo anterior

seq[n] = {1, ..., 27}

do 
    VaciarMapa()
    par_freq_max = frecuenciaMaxima(seq) // O(n) pasada 1 // par_freq_max = (par, freq)
    If par_freq_max.freq > 1
        reemplazarParPorSimboloNuevo(seq) // O(n) pasada 2
while (freq_max >1)

seq[7] = {1,...27}

Ej de Mapeo (pasada 1)
1 2 3 4 1 2 3 

key, value
par, freq
1 2, 2
2 3, 2
3 4, 1
4 1, 1

par_freq_max = (1 2, 2)
generamos regla
1 2 -> 28

aplicamos la regla
seq = [28, 3, 4, 28, 3 ] 

iteracion 2
VaciarMapa()

Mapear de nuevo (pasada 1)

key, value
par, freq
28 3, 2
3 4, 1
4 28, 1

par_freq_max = (28 3, 2)
generamos regla
28 3 -> 29

aplicamos la regla
seq = [29, 4, 29 ] 

iteracion 3

key, value
par, freq
29 4, 1
4 29, 1

muere

Para la segunda iteracion

En la versión avanzada, cada nodo de la lista doblemente enlazada contendrá dos punteros adicionales, uno a la ocurrencia previa del mismo par y otro a la 
ocurrencia siguiente a dicho par. El map, además de la frecuencia del par, almacenará un puntero a la primera ocurrencia del par y un puntero a la última ocurrencia
del par. Por último, se implementará un MAX-heap cuya clave será la frecuencia y, por cada nodo, el valor será el par correspondiente (notar que estos nodos
son conceptuales, ya que MAX-heap se puede implementar sobre un arreglo o vector). El heap implementado debe permitir una operación adicional a las habituales la
cual, dado un nodo, permitirá modificar su clave (notar que esto puede subir o bajar al nodo en el heap).


Lista Doblemente Enlazada con punteros adicionales
    - prev_pair
    - next_pair

Map debe incluir
    - Frecuencia del par
    - puntero a la primera ocurrencia del par -> lista enlazada
    - puntero a la ultima ocurrencia del par -> lista enlazada
    - puntero nodo heap

MAX_heap que debe incluir todos los nodos
    - clave: frequencia del par
    - valor: par correspondiente
    - implementar funcion { fun(nodo) -> modificar(nodo) }


También es posible que un clave llegue a valer 0, pero no es necesario eliminar el nodo correspondiente. 

El algoritmo funcionará del siguiente modo: 
    en una primera pasada se inicializará el map, el heap y los punteros de la lista doblemente enlazada. 
    Después, iterativamente se solicitará al heap el par de mayor frecuencia. 
        Si la frecuencia es menor que 2, se termina el algoritmo. 
        Mientras que la frecuencia obtenida sea 2 o más, 
            se creará un nuevo sı́mbolo (incremental sobre el anterior) que reemplazará a dicho par en la secuencia. 
            Por cada substitución en la secuencia se puede tener que: 
                Casos
                    max_heap -> crear un nuevo par (con el nuevo sı́mbolo y quien lo precede/sucede), 
                    max_heap -> modificar la frecuencia de un par.
                    max_heap -> eliminar un par.
                se deben mantener los punteros en la lista doblemente enlazada.
                Estos detalles de implementación pueden complicar el proyecto, 
                por lo que se recomienda realizar un ejemplo completo en papel en el que se analicen todos los casos.

                El negro (lapiz mina) simboliza los nodos de la LinkedList y a las conecciones que van de nodo a nodo.

                El rojo simbolisa ptrs de nextOcurr y prevOcurr:
                Si un nodo solo tiene un NULL, significa que sus ptrs [next/prev]Ocurr estan ambos apuntanto a nullptr
                [next/prev]Ocurr se ven simbolisados por conecciones rojas a la izquierda y a la derecha
                si esa coneccion tiene un NULL entonces esa ocurrencia no tiene una ocurrencia anterior o siguiente.

                El verde simbolisa ptr de las estructuras que se encuentran en el Map.
                Si apuntan a un NULL entonces, en ese momento, ese par no tiene ninguna ocurrencia en la LinkedList
                Si apuntan a un solo nodo, entonces solo tienen esa unica ocurrencia de par en la LinkedList y,
                si tienen un numero encerrado en verde, eso tambien sombolisa ocurrencia unica de par en la LinkedList
                Si apuntan a dos nodos distintos, entonces tienen 2 o mas ocurrencias de ese par en la LinkedList

                Ej:
                            (DIBUJO) 1

                (Plas texto (solo un poquito))

                Despues de ejecutar "prepair_ptrs_for_compression", por primera vez, la lista anterior queda de la siguiente forma:

                            (DIBUJO) 2

                la mayoria de los punteros a estructuras siguen iguales. A exepcion de los pares {2, 7} y {1, 3}.

                El {2, 7} va a dejar de tener su unica ocurrencia por lo que los punteros de su estructura en el Map ahora
                apuntaran a nullptrs.

                Y el {1, 3} ahora tendra a su segunda ocurrencia como su siguiente ocurrencia, su primera ocurrencia
                dejara de estar en la cadena de ocurrencia, el puntero nextOcurr de su primera ocurrencia pasara a ser un nullptr y
                el puntero prevOcurr de su segunda ocurrencia pasara a ser un nullptr.

                Ahora "compressing_ocurr" se ejecutara, dejando a la lista de la siguiente forma

                            (DIBUJO) 3
                
                El nodo que seguia despues del nodo que contenia al valor 7 fue eliminado.
                Y el nodo que contenia al 7 fue intercambiado por la regla 28 de compresion.
                Se agregaron dos pares nuevos al Map y al Heap. El par {2, 28} y el {28, 3} 

                "prepair_ptrs_for_compression" se ejecuta por segunda vez y la lista queda

                            (DIBUJO) 4

                la mayoria de los punteros a estructuras siguen iguales. A exepcion de los pares {5, 7} y {1, 3}.
                
                El {5, 7} va a dejar de tener su unica ocurrencia por lo que los punteros de su estructura en el Map ahora
                apuntaran a nullptrs.

                Y el {1, 3} ahora tendra a su segunda ocurrencia como su unica ocurrencia, su primera ocurrencia
                dejara de estar en la cadena de ocurrencia, el puntero nextOcurr de su primera ocurrencia pasara a ser un nullptr y
                el puntero prevOcurr de su segunda ocurrencia (ahora ultima ocurrencia) pasara a ser un nullptr.

                "compressing_ocurr" se ejecutara por segunda vez, dejando a la lista de la siguiente forma

                            (DIBUJO) 5

                El nodo que seguia despues del nodo que contenia al valor 7 fue eliminado.
                Y el nodo que contenia al 7 fue intercambiado por la regla 28 de compresion.
                Se agrego el par {5, 28} al Map y al Heap. Y la frecuencia del par {28, 3} se vio aumentada en 1.

                "prepair_ptrs_for_compression" y "compressing_ocurr" se ejecutan ambos por tercera vez, dejando a la LinkedList
                de la siguiente forma:

                            (DIBUJO) 6

                El nodo que seguia despues del nodo que contenia al valor 7 fue eliminado.
                Y el nodo que contenia al 7 fue intercambiado por la regla 28 de compresion.
                Se agrego el par {4, 28} al Map y al Heap. Y la frecuencia del par {28, 3} se vio aumentada en 1.
                
                Como se acabaron las ocurrencias del par {7, 3}, se continua con el par {28, 3} ya que es el de mayor frequencia
                y asi hasta que todos los pares tengan solo frequencia 1. Para ese punto, la LinkedList quedara de la siguiente forma

                            (DIBUJO) 7
                

