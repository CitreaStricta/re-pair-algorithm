Requerimientos Codigo

Dada una secuencia generar una "1 2 3 1 2 3" secuencia comprimida "R2"

Construir una gramática que genere dicha secuencia. Para ello, 
    - recursivamente reemplaza el par de sı́mbolos más frecuente, digamos xy por un nuevo sı́mbolo Z. 
        En ese momento se crea una regla de la forma Z → xy.
    - El proceso termina cuando ningún par de sı́mbolos se repite 2 veces.
    - No se considera la forma de almacenar las reglas
    - Se debe utilizar(e implementar) una lista doblemente enlazada
    - Se puede usar la clase map de la stl
    - Se puede usar la clase pair de la stl

Para la primera Version

La versión directa hará iteraciones sobre la secuencia mientras que en la misma haya algún par con frecuencia
Una vez detectado el par de mayor frecuencia, mayor a 1. Cada iteración realizará varias pasadas sobre la secuencia. En la primera pasada, para contar la frecuencia de los pares se utilizará map.
e realizará una segunda pasada reemplazando dicho par por un sı́mbolo nuevo y se pasará a la siguiente
iteración. Notar que en cada iteración el map se debe vaciar.

Pseudo codigo a partir del parrafo anterior

seq[n] = {1, ..., 27}

do 
    VaciarMapa()
    par_freq_max = frecuenciaMaxima(seq) // O(n) pasada 1 // par_freq_max = (par, freq)
    If par_freq_max.freq > 1
        reemplazarParPorSimboloNuevo(seq) // O(n) pasada 2
while (freq_max >1)

seq[7] = {1,...27}

Ej de Mapeo (pasada 1)
1 2 3 4 1 2 3 

key, value
par, freq
1 2, 2
2 3, 2
3 4, 1
4 1, 1

par_freq_max = (1 2, 2)
generamos regla
1 2 -> 28

aplicamos la regla
seq = [28, 3, 4, 28, 3 ] 

iteracion 2
VaciarMapa()

Mapear de nuevo (pasada 1)

key, value
par, freq
28 3, 2
3 4, 1
4 28, 1

par_freq_max = (28 3, 2)
generamos regla
28 3 -> 29

aplicamos la regla
seq = [29, 4, 29 ] 

iteracion 3

key, value
par, freq
29 4, 1
4 29, 1

muere